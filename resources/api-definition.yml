openapi: 3.0.0
info:
  version: '1.0.0'
  title: 'E-Store API'
  # license:
  #   name: MIT
  description: |
    E-Store API based on the OpenAPI 3.0 specification.

    Useful links:
    - [E-Store repository](https://github.com/evanigwilo/e-store/tree/server)
    - [The source API definition](https://github.com/evanigwilo/e-store/tree/server/resources/api-definition.yml)
servers:
  - url: 'https://api.e-store.gq/v1'
tags:
  - name: User
    description: Access to user related endpoints
  - name: Product
    description: Access to product related endpoints
  - name: Order
    description: Access to orders related endpoints
  - name: Payment
    description: Access to payments related endpoints
  - name: Users
    description: Access to managing users related endpoints

paths:
  # User
  /auth:
    get:
      tags:
        - User
      description: This can only be done by an authenticated user.
      summary: Gets user attributes for the current authenticated user
      responses:
        '200':
          description: Returns user attributes
          content:
            application/json:
              schema:
                type: object
                properties:
                  admin:
                    type: boolean
                    example: true
                  manageProducts:
                    type: boolean
                    example: true
                  emailVerified:
                    type: boolean
                    example: true
                  username:
                    type: string
                    example: user
        '403':
          $ref: '#/components/responses/Forbidden'
  /register:
    post:
      tags:
        - User
      description: This can only be done by an authenticated user.
      summary: Register and returns the authentication cookie
      security: [] # no authentication
      requestBody:
        required: true
        description: Sample register information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: |
            Successfully registers user.

            Returns user attributes and cookies that are to be included  in subsequent requests.
          headers:
            Set-Cookie:
              schema:
                $ref: '#/components/schemas/HeaderCookie'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: ''
          content:
            application/json:
              examples:
                Email exist:
                  description: User with corresponding email exists
                  value:
                    name: EmailExistsException
                Username exist:
                  description: User with corresponding username exists
                  value:
                    name: UsernameExistsException
                    '$metadata':
                      httpStatusCode: 400
                      attempts: 1,
                      totalRetryDelay: 0
                Email Invalid:
                  description: Email is not supplied or is invalid
                  value:
                    name: EmailInvalidException
                Gender Invalid:
                  description: Gender is not supplied or is invalid
                  value:
                    name: GenderInvalidException
                Username Invalid:
                  description: Username is not supplied or is invalid
                  value:
                    name: UsernameInvalidException
                Username is Email Error:
                  description: Username supplied has an email format
                  value:
                    name: UsernameIsEmailException
                Password Invalid:
                  description:
                    Password is less than 6 characters or password is not
                    supplied
                  value:
                    name: InvalidPasswordException
                    '$metadata':
                      httpStatusCode: 400
                      attempts: 1,
                      totalRetryDelay: 0
  /login:
    post:
      tags:
        - User
      summary: Logs in and returns the authentication cookie
      security: [] # no authentication
      requestBody:
        required: true
        description: Sample login and password.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: |
            Successfully authenticated.

            Returns user attributes and cookies that are to be included  in subsequent requests.
          headers:
            Set-Cookie:
              schema:
                $ref: '#/components/schemas/HeaderCookie'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: ''
          content:
            application/json:
              examples: # Multiple examples
                Username/email does not exist:
                  description:
                    User with corresponding username/email does not exist
                  value:
                    name: UserNotFoundException
                    '$metadata':
                      httpStatusCode: 400
                      attempts: 1,
                      totalRetryDelay: 0
                Username Invalid:
                  description: Username/email is not supplied or is invalid
                  value:
                    name: UsernameOrEmailInvalidException
                Password Invalid:
                  description:
                    Password is less than 6 characters or password is not
                    supplied
                  value:
                    name: PasswordInvalidException
        '500':
          description:
            Password does not match corresponding username/email supplied
          content:
            application/json:
              example:
                name: NotAuthorizedException
                '$metadata':
                  httpStatusCode: 400
                  attempts: 1,
                  totalRetryDelay: 0
  /logout:
    post:
      tags:
        - User
      summary: Logs out and deletes the authenticated cookie
      security: [] # no authentication
      responses:
        '204':
          description: |
            Successfully logged out and clears cookie.

            Returns no content.
          headers:
            Set-Cookie:
              # clears cookie
              schema:
                type: array
                items:
                  type: string
                example:
                  [
                    'AccessToken=; Max-Age=86400; Domain=.e-store.gq; Path=/;
                    HttpOnly; Secure; SameSite=Strict',
                    'IdToken=; Max-Age=86400; Domain=.e-store.gq; Path=/;
                    HttpOnly; Secure; SameSite=Strict',
                    'RefreshToken=; Max-Age=86400; Domain=.e-store.gq; Path=/;
                    HttpOnly; Secure; SameSite=Strict',
                  ]
  /verify:
    post:
      tags:
        - User
      description: This can only be done by an authenticated user.
      summary: Sends or verifies user using code sent via email
      parameters:
        - name: code
          in: query
          description: Code sent to email
          required: false
          schema:
            type: string
      responses:
        '204':
          description: |
            Sends or verifies Code

            Returns no content.
        '400':
          description: ''
          content:
            application/json:
              examples:
                CodeMismatchException:
                  description:
                    The provided code doesn't match what the server was
                    expecting.
                  value:
                    name: CodeMismatchException
                    '$metadata':
                      httpStatusCode: 400
                      attempts: 1,
                      totalRetryDelay: 0
                ExpiredCodeException:
                  description: This exception is thrown if a code has expired
                  value:
                    name: ExpiredCodeException
                    '$metadata':
                      httpStatusCode: 400
                      attempts: 1,
                      totalRetryDelay: 0
        '403':
          $ref: '#/components/responses/Forbidden'
  /refresh:
    post:
      tags:
        - User
      description: This can only be done by an authenticated user.
      summary: Refreshes tokens using refresh token from cookie
      responses:
        '200':
          description: |
            Successfully authenticated.

            Returns user attributes and cookies that are to be included  in subsequent requests.
          headers:
            Set-Cookie:
              schema:
                $ref: '#/components/schemas/HeaderCookie'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Refresh token is not supplied or is invalid
          content:
            application/json:
              example:
                name: InvalidRefreshTokenException
        '500':
          description: User is not authorized or invalid refresh token
          content:
            application/json:
              example:
                name: NotAuthorizedException
                '$metadata':
                  httpStatusCode: 400
                  attempts: 1,
                  totalRetryDelay: 0

  # Product
  /category:
    get:
      tags:
        - Product
      summary: Gets supported product categories
      security: [] # no authentication
      responses:
        '200':
          description: Returns supported product categories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  [
                    'Grocery',
                    'Electronics',
                    'Health & Beauty',
                    'Automobile',
                    'Home & Kitchen',
                    'Phones & Tablets',
                    'Books',
                    'Gaming',
                    'Fashion',
                    'Sports & Outdoors',
                  ]
  /country:
    get:
      tags:
        - Product
      summary: Gets supported countries for delivery
      security: [] # no authentication
      responses:
        '200':
          description: Returns supported countries for delivery
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: string
                    name:
                      type: string
                    emoji:
                      type: string
                example:
                  - code: 'US'
                    name: 'United States'
                    emoji: '🇺🇸'
                  - code: 'CN'
                    name: 'China'
                    emoji: '🇨🇳'
                  - code: 'JP'
                    name: 'Japan'
                    emoji: '🇯🇵'
  /products:
    post:
      tags:
        - Product
      summary: Gets products
      parameters:
        - name: category
          in: query
          description: Product category to base query on
          required: false
          schema:
            type: string
          example: grocery
        - name: sort
          in: query
          description: Sort results based on price (low or high)
          required: false
          schema:
            type: string
          example: low
        - name: search
          in: query
          description:
            Finds products that starts with or contains a search pattern
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/Limit'
      requestBody:
        required: false
        description:
          Last key returned from previous query to retrieve more items
        content:
          application/json:
            schema:
              type: object
              properties:
                identity:
                  type: string
                password:
                  type: string
              example:
                id:
                  S: '4ed68898-0d73-41fa-bfea-d4e2f86ce8f3'
      security: [] # no authentication
      responses:
        '200':
          description: Returns products matching the query
          content:
            application/json:
              schema:
                example:
                  lastKey:
                    id:
                      S: '4ed68898-0d73-41fa-bfea-d4e2f86ce8f3'
                  queryResult:
                    - id: '2907c78c-96d6-495b-8c20-e65801ad9ccb'
                      name: 'Eggs'
                      category: 'Grocery'
                      image_1: true
                      image_2: true
                      image_3: true
                      createdAt: 1234567890
                      price: 70
                    - id: '2f206473-7568-470a-a31b-12afa2ba9f3c'
                      name: 'Iphone 12 Pro Max'
                      category: 'Electronics'
                      image_1: true
                      image_2: true
                      image_3: false
                      createdAt: 1234567890
                      price: 1500
        '400':
          $ref: '#/components/responses/Limit'
  /product:
    post:
      tags:
        - Product
      description:
        This can only be done by an authenticated user who also has product
        management privilege.
      summary: Creates a product
      requestBody:
        $ref: '#/components/requestBodies/CreateProduct'
      responses:
        '200':
          description: Returns product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleProduct'
        '400':
          description: ''
          content:
            application/json:
              examples:
                Product Name Invalid:
                  $ref: '#/components/examples/ProductNameInvalid'
                Product Price Invalid:
                  $ref: '#/components/examples/ProductPriceInvalid'
                Product Category Invalid:
                  $ref: '#/components/examples/ProductCategoryInvalid'
        '403':
          $ref: '#/components/responses/Forbidden'
  /product/{id}:
    get:
      tags:
        - Product
      summary: Get a product by id
      operationId: getProduct
      parameters:
        - $ref: '#/components/parameters/ProductId'
      security: [] # no authentication
      responses:
        '200':
          description: Returns product with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleProduct'
        '204':
          description: |
            Product not found.

            Returns no content.
        '400':
          description: Product id is not supplied or is invalid
          content:
            application/json:
              example:
                name: InvalidProductIdException
    put:
      tags:
        - Product
      summary: Update product by id
      description:
        This can only be done by an authenticated user who also has product
        management privilege.
      operationId: updateProduct
      requestBody:
        $ref: '#/components/requestBodies/CreateProduct'
      parameters:
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: Returns updated product with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleProduct'
        '400':
          description: ''
          content:
            application/json:
              examples:
                Product Id Invalid:
                  $ref: '#/components/examples/ProductIdInvalid'
                Product Name Invalid:
                  $ref: '#/components/examples/ProductNameInvalid'
                Product Price Invalid:
                  $ref: '#/components/examples/ProductPriceInvalid'
                Product Category Invalid:
                  $ref: '#/components/examples/ProductCategoryInvalid'
        '403':
          $ref: '#/components/responses/Forbidden'
    delete:
      tags:
        - Product
      summary: Delete product by id
      description:
        This can only be done by an authenticated user who also has product
        management privilege.
      operationId: deleteProduct
      parameters:
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: Deletes product if it exists
          content:
            application/json:
              example:
                '$metadata':
                  httpStatusCode: 200
                  attempts: 1,
                  totalRetryDelay: 0
        '403':
          $ref: '#/components/responses/Forbidden'
  /product/{id}/image:
    post:
      tags:
        - Product
      summary: Get the form fields and target URL for direct image uploading.
      description:
        This can only be done by an authenticated user who also has product
        management privilege.
      operationId: getUploadUrl
      requestBody:
        required: true
        description: Image type
        content:
          application/json:
            schema:
              type: object
              example:
                fileType: 'image/jpeg'
      parameters:
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/ImageSlot'
      responses:
        '200':
          description: Returns upload url and keys
          content:
            application/json:
              schema:
                example:
                  url: 'https://s3.amazonaws.com/bucket-product-images'
                  fields:
                    key: '2907c78c-96d6-495b-8c20-e65801ad9ccb'
                    acl: 'public-read'
                    Content-Type: 'image/jpeg'
                    bucket: 'bucket-product-images'
                    X-Amz-Algorithm: 'AWS4-HMAC-SHA256'
                    X-Amz-Credential: 'ASIA2MNLEVZWO2WVJSBC/20220814/us-east-1/s3/aws4_request'
                    X-Amz-Date: '20220814T152446Z'
                    X-Amz-Security-Token: 'IQoJb3JpZ2luX2VjEEAaCXVzLWVhc3QtMSJIMEYCIQCzwnoSMhWlVcBM1olsj9qoCu+SR92JebKUfdAulReOhAIhALLvCaoLaxvDLtZsK1RCP5SKD0UcKAeH9mvMZa2K7TzUKqQDCKn//////////wEQABoMNzEzODYwMzYxODM2IgykOydY6mnoFsA3ZLcq+ALGzKrJxpvSyY+h5OA/P4/N4wcoQkuQ6Tv2yw8Njry2PdFOdP/F3dLZrY7NCdhMy8BljfQHb0qjPv2k7N+RVoP3yGjeu/hvWifas518K+PK3b+q945yn+rRYuJeRYGQOoz4LLi+N+e4/Arb1QxIpP1Ecy0MpJDi6E+l6lGkkj4Rvjot13+btmWyURwiiWEF8Qyw+5D4lXKMojphAxyeZYxSHJbke+1aArJmtoAbcFG4FsIz8miyOIiOmYh0MB3BNFzUOAKoZtS0FKFBjsvZsL0Kj2DYfQkbDmF4Ul4+y9WcBP7q'
                    Policy: 'eyJleHBpcmF0aW9uIjoiMjAyMi0wOC0xNFQxNToyOTo0NloiLCJjb25kaXRpb25zIjpbWyJjb250ZW50LWxlbmd0aC1yYW5nZSIsMCwxMDAwMDAwXSx7ImtleSI6IjRlZDY4ODk4LTBkNzMtNDFmYS1iZmVhLWQ0ZTJmODZjZThmMy8yIn0seyJhY2wiOiJwdWJsaWMtcmVhZCJ9LHsiQ29udGVudC1UeXBlIjoiaW1hZ2UvanBlZyJ9LHsiYnVja2V0IjoiYnVja2V0LXByb2R1Y3QtaW1hZ2VzIn0seyJYLUFtei1BbGdvcml0aG0iOiJBV1M0LUhNQUMtU0hBMjU2In0seyJYLUFtei1DcmVkZW50aWFsIjoiQVNJQTJNTkxFVlpXTzJXVkpTQkMvMjAyMjA4MTQvdXMtZWFzdC0xL3MzL2F3czRfcmVxdWVzdCJ9LHsiWC1BbXotRGF0ZSI6IjIwMjIwODE0VDE1MjQ0NloifSx7IlgtQW16LVNlY3VyaXR5LVRva2VuIjoiSVFvSmIzSnBaMmx1WDJWakVFQWFDWFZ6TFdWaGMzUXRNU0pJTUVZQ0lRQ3p3bm9TTWhXbFZjQk0xb2xzajlxb0N1K1NSOTJKZWJLVWZkQX='
                    X-Amz-Signature: 'e7a14cb1e0d2c6d821c12ecbc6bc84d9208d25002fa7665c5ac090c8ea7a518f'
        '400':
          description: ''
          content:
            application/json:
              examples:
                Product Id Invalid:
                  $ref: '#/components/examples/ProductIdInvalid'
                Image Slot Invalid:
                  $ref: '#/components/examples/ImageSlotInvalid'
                No Product With Id:
                  $ref: '#/components/examples/NoProductWithId'
                Filetype Invalid:
                  description: Filetype supplied is not an image type
                  value:
                    name: InvalidFileTypeException
        '403':
          $ref: '#/components/responses/Forbidden'
    delete:
      tags:
        - Product
      summary: Delete product image by id
      description:
        This can only be done by an authenticated user who also has product
        management privilege.
      operationId: deleteProductImage
      parameters:
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/ImageSlot'
      responses:
        '200':
          description: Deletes and update product image status
          content:
            application/json:
              example:
                updateResult:
                  '$metadata':
                    httpStatusCode: 200
                    attempts: 1,
                    totalRetryDelay: 0
                deleteResult:
                  '$metadata':
                    httpStatusCode: 200
                    attempts: 1,
                    totalRetryDelay: 0
        '400':
          description: ''
          content:
            application/json:
              examples:
                Product Id Invalid:
                  $ref: '#/components/examples/ProductIdInvalid'
                Image Slot Invalid:
                  $ref: '#/components/examples/ImageSlotInvalid'
                No Product With Id:
                  $ref: '#/components/examples/NoProductWithId'
        '403':
          $ref: '#/components/responses/Forbidden'

  # Order
  /order:
    post:
      tags:
        - Order
      summary: Gets orders
      description: This can only be done by an authenticated user.
      parameters:
        - name: category
          in: query
          description: |
            Order category to base query on.

            (all, requested, succeeded or canceled)
          required: false
          schema:
            type: string
          example: succeeded
        - $ref: '#/components/parameters/Limit'
      requestBody:
        required: false
        description:
          Last key returned from previous query to retrieve more items
        content:
          application/json:
            schema:
              type: object
              properties:
                identity:
                  type: string
                password:
                  type: string
              example:
                user:
                  S: 'user'
                intent:
                  S: 'pi_3LQJkXJcU3yoQ34p160oKEAQ'
      responses:
        '200':
          description: Returns orders
          content:
            application/json:
              examples:
                Orders:
                  $ref: '#/components/examples/Orders'
        '400':
          $ref: '#/components/responses/Limit'
        '403':
          $ref: '#/components/responses/Forbidden'
  /order/create:
    post:
      tags:
        - Order
      summary: Create an order
      description: This can only be done by an authenticated user.
      operationId: createOrder
      requestBody:
        required: true
        description: Order to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
      responses:
        '200':
          description: Returns order created
          content:
            application/json:
              examples:
                Orders:
                  $ref: '#/components/examples/Order'
        '400':
          description: Order is not supplied or is invalid
          content:
            application/json:
              example:
                name: InvalidOrderException
        '403':
          $ref: '#/components/responses/Forbidden'
  /order/{intent}:
    post:
      tags:
        - Order
      summary: Get an order by intent
      description: This can only be done by an authenticated user.
      operationId: getOrder
      parameters:
        - name: intent
          in: path
          description: Order matching the specified intent
          required: true
          schema:
            type: string
          example: cart
      requestBody:
        description: Users local cart items to merge with online cart
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
      responses:
        '200':
          description: Returns order with the specified intent
          content:
            application/json:
              examples:
                Orders:
                  $ref: '#/components/examples/Order'
        '400':
          description: Intent is not supplied or is invalid
          content:
            application/json:
              example:
                name: No Intent Specified
        '403':
          $ref: '#/components/responses/Forbidden'

  # Users
  /users:
    post:
      tags:
        - Users
      summary: Gets users
      description:
        This can only be done by an authenticated user who also has admin
        privilege.
      responses:
        '200':
          description: Returns all users
          content:
            application/json:
              schema:
                example:
                  - username: user1
                    group: admin_group
                    status: CONFIRMED
                    gender: female
                  - username: user2
                    group: manage_product_group
                    status: CONFIRMED
                    gender: male
                  - username: user3
                    group: ''
                    status: CONFIRMED
                    gender: male
        '403':
          $ref: '#/components/responses/Forbidden'
  /user-group/{groupname}:
    post:
      tags:
        - Users
      summary: Add user to group
      description:
        This can only be done by an authenticated user who also has admin
        privilege.
      operationId: addToGroup
      parameters:
        - $ref: '#/components/parameters/UserGroupGroupName'
        - $ref: '#/components/parameters/UserGroupUserName'
      responses:
        '200':
          description: Returns updated user group
          content:
            application/json:
              schema:
                example:
                  username: user1
                  group: manage_product_group
        '400':
          $ref: '#/components/responses/GroupErrors'
        '403':
          $ref: '#/components/responses/Forbidden'
    delete:
      tags:
        - Users
      summary: Remove user from group
      description:
        This can only be done by an authenticated user who also has admin
        privilege.
      operationId: removeFromGroup
      parameters:
        - $ref: '#/components/parameters/UserGroupGroupName'
        - $ref: '#/components/parameters/UserGroupUserName'
      responses:
        '200':
          description: Returns updated user group
          content:
            application/json:
              schema:
                example:
                  username: user1
                  group: ''
        '400':
          $ref: '#/components/responses/GroupErrors'
        '403':
          $ref: '#/components/responses/Forbidden'

  # Payment
  /payment/checkout:
    post:
      tags:
        - Payment
      summary: Checkouts an order
      description: This can only be done by an authenticated user.
      operationId: checkoutOrder
      requestBody:
        required: true
        description: Location for delivery
        content:
          application/json:
            schema:
              type: object
              example:
                location:
                  address: 'Paris'
                  country: 'France'
      responses:
        '200':
          description: Returns client secret and amount for card payment
          content:
            application/json:
              example:
                clientSecret: pi_3LWlbXJcU3yoQ34p1dpJ5VSZ_secret_GGzg7VR4JGdA5rkKNGxyACAFY
                amount: 1500.00

        '400':
          description: Order is not supplied or is invalid
          content:
            application/json:
              examples:
                No Cart:
                  description: No Cart exist for order to be created
                  value:
                    name: NoOrderInCartException
                Empty Cart:
                  description: Cart has no items
                  value:
                    name: NoOrderException
                Location Invalid:
                  description:
                    Location address or country not supplied or is invalid
                  value:
                    name: InvalidLocationException
        '403':
          $ref: '#/components/responses/Forbidden'
  /payment/hook:
    post:
      tags:
        - Payment
      summary: Webhook for updating payment processing
      operationId: paymentHook
      security: [] # no authentication
      responses:
        '200':
          description: Returns payment update status
          content:
            application/json:
              example:
                '$metadata':
                  httpStatusCode: 400
                  attempts: 1,
                  totalRetryDelay: 0
        '400':
          description: ''
          content:
            application/json:
              examples:
                Stripe Signature Error:
                  description: No Stripe signature in header
                  value:
                    name:
                      'no Stripe signature received in header, returning 400 Bad
                      Request'
                Event Body Error:
                  description: No event body
                  value:
                    name:
                      'no event body received in POST, returning 400 Bad Request'

components:
  schemas:
    HeaderCookie:
      type: array
      items:
        type: string
      example:
        [
          'AccessToken=AccessToken; Max-Age=86400; Domain=.e-store.gq; Path=/;
          HttpOnly; Secure; SameSite=Strict',
          'IdToken=IdToken; Max-Age=86400; Domain=.e-store.gq; Path=/; HttpOnly;
          Secure; SameSite=Strict',
          'RefreshToken=RefreshToken; Max-Age=86400; Domain=.e-store.gq; Path=/;
          HttpOnly; Secure; SameSite=Strict',
        ]
    User:
      type: object
      properties:
        admin:
          type: boolean
          example: false
        manageProducts:
          type: boolean
          example: false
        emailVerified:
          type: boolean
          example: false
        username:
          type: string
          example: user
        tokens:
          type: object
          properties:
            AccessToken:
              type: string
              example: AccessToken
            IdToken:
              type: string
              example: IdToken
            RefreshToken:
              type: string
              example: RefreshToken
            TokenType:
              type: string
              example: Bearer
    LoginRequest:
      type: object
      required:
        - identity
        - password
      properties:
        identity:
          type: string
        password:
          type: string
      example:
        identity: 'username'
        password: '123456'
    RegisterRequest:
      type: object
      required:
        - email
        - gender
        - username
        - password
      properties:
        email:
          type: string
        gender:
          type: string
        username:
          type: string
        password:
          type: string
      example:
        username: 'user'
        password: '123456'
        gender: 'male'
        email: 'user@email.com'
    CreateProduct:
      type: object
      example:
        name: 'IPhone X'
        category: 'Electronics'
        price: 199.99
    SampleProduct:
      example:
        id: '2f206473-7568-470a-a31b-12afa2ba9f3c'
        name: 'Iphone 12 Pro Max'
        category: 'Electronics'
        image_1: true
        image_2: true
        image_3: false
        createdAt: 1234567890
        price: 1500
    Cart:
      example:
        - productId: '2f206473-7568-470a-a31b-12afa2ba9f3c'
          count: 5
        - productId: '2907c78c-96d6-495b-8c20-e65801ad9ccb'
          count: 2
  examples:
    ProductIdInvalid:
      description: Product id is not supplied or is invalid
      value:
        name: InvalidProductIdException
    ProductNameInvalid:
      description: Product name is not supplied or is invalid
      value:
        name: InvalidNameException
    ProductPriceInvalid:
      description: Product price is not supplied or is invalid
      value:
        name: InvalidPriceException
    ProductCategoryInvalid:
      description: Product category is not supplied or is invalid
      value:
        name: InvalidCategoryException
    ImageSlotInvalid:
      description: Image slot is not supplied or is not in the range 1-3
      value:
        name: InvalidSlotException
    NoProductWithId:
      description: Product id supplied has no corresponding product
      value:
        name: NoProductWithIdException
    Order:
      value:
        orders:
          - productId: '2f206473-7568-470a-a31b-12afa2ba9f3c'
            name: 'Iphone 12 Pro Max'
            category: 'Electronics'
            count: 5
            slot: 1
            price: 1500
          - productId: '2907c78c-96d6-495b-8c20-e65801ad9ccb'
            name: 'Eggs'
            category: 'Grocery'
            count: 2
            slot: 1
            price: 70
        status: 'PAYMENT CREATED'
        amount: 7640
        createdAt: 1234567890
        user: 'user'
        intent: 'cart'
        logs: 'Payment created.'
        location:
          country: 'France'
          address: 'Paris'
    Orders:
      value:
        lastKey:
          user:
            S: 'user'
          intent:
            S: 'pi_3LQJkXJcU3yoQ34p160oKEAQ'
          queryResult:
            orders:
              - productId: '2f206473-7568-470a-a31b-12afa2ba9f3c'
                name: 'Iphone 12 Pro Max'
                category: 'Electronics'
                count: 5
                slot: 1
                price: 1500
              - productId: '2907c78c-96d6-495b-8c20-e65801ad9ccb'
                name: 'Eggs'
                category: 'Grocery'
                count: 2
                slot: 1
                price: 70
            status: 'PAYMENT CREATED'
            amount: 7640
            createdAt: 1234567890
            user: 'user'
            intent: 'pi_3LQJkXJcU3yoQ34p160oKEAQ'
            logs: 'Payment created.'
            location:
              country: 'France'
              address: 'Paris'
  responses:
    Limit:
      description: Limit supplied is invalid or not a number
      content:
        application/json:
          example:
            name: InvalidLimitException
    Forbidden:
      description: 'User is not authorized'
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Forbidden
    GroupErrors:
      description: ''
      content:
        application/json:
          examples:
            Invalid Group:
              description: Groupname is not supplied or is not valid
              value:
                name: EmptyGroupException
            Invalid Username:
              description: Username is not supplied or is not valid
              value:
                name: EmptyUsernameException
            Not Authorized:
              description:
                Authenticated user is not privileged to perform this operation
              value:
                name: NotAuthorizedException
  parameters:
    Limit:
      name: limit
      in: query
      description: Limits the number of products returned
      required: false
      schema:
        type: string
      example: 10
    ProductId:
      name: id
      in: path
      description: Product matching the specified id
      required: true
      schema:
        type: string
    ImageSlot:
      name: slot
      in: query
      description: Image slot (1-3)
      required: true
      schema:
        type: string
      example: 1
    UserGroupGroupName:
      name: groupname
      in: path
      description: Name of the group
      required: true
      schema:
        type: string
      example: admin_group
    UserGroupUserName:
      name: username
      in: query
      description: Username of user to update group
      required: true
      schema:
        type: string
      example: user
  requestBodies:
    CreateProduct:
      required: true
      description: Product description
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateProduct'
  securitySchemes:
    IdToken: # arbitrary name for the security scheme; will be used in the "security" key later
      type: apiKey
      in: cookie
      name: IdToken # cookie name
    AccessToken:
      type: apiKey
      in: cookie
      name: AccessToken # cookie name
    RefreshToken:
      type: apiKey
      in: cookie
      name: RefreshToken # cookie name

# Apply cookie auth globally to all operations
security:
  - IdToken: []
  - AccessToken: []
  - RefreshToken: []
